
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000ef8  00000f8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080014a  0080014a  00000fd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dc4  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abb  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001892  00000000  00000000  00005a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  000072e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000849e  00000000  00000000  00007818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003154  00000000  00000000  0000fcb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00012e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003310  00000000  00000000  00012f82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c2       	rjmp	.+1154   	; 0x488 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c3       	rjmp	.+1718   	; 0x6d4 <__vector_7>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a8 c2       	rjmp	.+1360   	; 0x57e <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	7b d3       	rcall	.+1782   	; 0x792 <main>
  9c:	2b c7       	rjmp	.+3670   	; 0xef4 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));

}/* i2c_stop */
  a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  a4:	88 e4       	ldi	r24, 0x48	; 72
  a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  aa:	08 95       	ret

000000ac <i2c_start_wait>:
  ac:	24 ea       	ldi	r18, 0xA4	; 164
  ae:	34 e8       	ldi	r19, 0x84	; 132
  b0:	44 e9       	ldi	r20, 0x94	; 148
  b2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  b6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ba:	97 ff       	sbrs	r25, 7
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <i2c_start_wait+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	11 f0       	breq	.+4      	; 0xcc <i2c_start_wait+0x20>
  c8:	90 31       	cpi	r25, 0x10	; 16
  ca:	99 f7       	brne	.-26     	; 0xb2 <i2c_start_wait+0x6>
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
  d0:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  d8:	97 ff       	sbrs	r25, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <i2c_start_wait+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	90 32       	cpi	r25, 0x20	; 32
  e4:	19 f0       	breq	.+6      	; 0xec <i2c_start_wait+0x40>
  e6:	98 35       	cpi	r25, 0x58	; 88
  e8:	09 f0       	breq	.+2      	; 0xec <i2c_start_wait+0x40>
  ea:	08 95       	ret
  ec:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f4:	94 fd       	sbrc	r25, 4
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <i2c_start_wait+0x44>
  f8:	dc cf       	rjmp	.-72     	; 0xb2 <i2c_start_wait+0x6>

000000fa <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
  fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 108:	87 ff       	sbrs	r24, 7
 10a:	fc cf       	rjmp	.-8      	; 0x104 <i2c_write+0xa>
		
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f0       	breq	.+2      	; 0x11a <i2c_write+0x20>
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 118:	08 95       	ret
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret

0000011e <lcd_set_cursor>:

void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
		lcd_write(*it);
	}
}
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	64 30       	cpi	r22, 0x04	; 4
 128:	08 f0       	brcs	.+2      	; 0x12c <lcd_set_cursor+0xe>
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	e6 2f       	mov	r30, r22
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	eb 5f       	subi	r30, 0xFB	; 251
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	90 81       	ld	r25, Z
 136:	c8 2f       	mov	r28, r24
 138:	c9 0f       	add	r28, r25
 13a:	c0 68       	ori	r28, 0x80	; 128
 13c:	0c 2f       	mov	r16, r28
 13e:	02 95       	swap	r16
 140:	0f 70       	andi	r16, 0x0F	; 15
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	08 9f       	mul	r16, r24
 146:	80 01       	movw	r16, r0
 148:	11 24       	eor	r1, r1
 14a:	d0 2f       	mov	r29, r16
 14c:	d8 60       	ori	r29, 0x08	; 8
 14e:	8d 2f       	mov	r24, r29
 150:	d4 df       	rcall	.-88     	; 0xfa <i2c_write>
 152:	80 2f       	mov	r24, r16
 154:	8c 60       	ori	r24, 0x0C	; 12
 156:	d1 df       	rcall	.-94     	; 0xfa <i2c_write>
 158:	8d 2f       	mov	r24, r29
 15a:	cf df       	rcall	.-98     	; 0xfa <i2c_write>
 15c:	8f ea       	ldi	r24, 0xAF	; 175
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_set_cursor+0x42>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_set_cursor+0x48>
 166:	00 00       	nop
 168:	90 e1       	ldi	r25, 0x10	; 16
 16a:	c9 9f       	mul	r28, r25
 16c:	e0 01       	movw	r28, r0
 16e:	11 24       	eor	r1, r1
 170:	dc 2f       	mov	r29, r28
 172:	d8 60       	ori	r29, 0x08	; 8
 174:	8d 2f       	mov	r24, r29
 176:	c1 df       	rcall	.-126    	; 0xfa <i2c_write>
 178:	8c 2f       	mov	r24, r28
 17a:	8c 60       	ori	r24, 0x0C	; 12
 17c:	be df       	rcall	.-132    	; 0xfa <i2c_write>
 17e:	8d 2f       	mov	r24, r29
 180:	bc df       	rcall	.-136    	; 0xfa <i2c_write>
 182:	8f ea       	ldi	r24, 0xAF	; 175
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_cursor+0x68>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_set_cursor+0x6e>
 18c:	00 00       	nop
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <lcd_printf>:

void lcd_printf(char *format, ...) {
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	9e 01       	movw	r18, r28
 1ae:	25 5f       	subi	r18, 0xF5	; 245
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	f9 01       	movw	r30, r18
 1b4:	41 91       	ld	r20, Z+
 1b6:	51 91       	ld	r21, Z+
 1b8:	9f 01       	movw	r18, r30
	va_list args;

	va_start(args, format);
	vsnprintf(lcd_buffer, LCD_COL_COUNT + 1, format, args);
 1ba:	65 e1       	ldi	r22, 0x15	; 21
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	8a e4       	ldi	r24, 0x4A	; 74
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	b6 d3       	rcall	.+1900   	; 0x930 <vsnprintf>

	lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
 1c4:	00 91 4a 01 	lds	r16, 0x014A	; 0x80014a <__data_end>
 1c8:	00 23       	and	r16, r16
 1ca:	99 f1       	breq	.+102    	; 0x232 <lcd_printf+0x9a>
 1cc:	9b e4       	ldi	r25, 0x4B	; 75
 1ce:	c9 2e       	mov	r12, r25
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	d9 2e       	mov	r13, r25
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 1d4:	e0 2e       	mov	r14, r16
 1d6:	e2 94       	swap	r14
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	e8 22       	and	r14, r24
 1dc:	f0 e1       	ldi	r31, 0x10	; 16
 1de:	ef 9e       	mul	r14, r31
 1e0:	70 01       	movw	r14, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	1e 2d       	mov	r17, r14
 1e6:	19 60       	ori	r17, 0x09	; 9
 1e8:	81 2f       	mov	r24, r17
 1ea:	87 df       	rcall	.-242    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 1ec:	8e 2d       	mov	r24, r14
 1ee:	8d 60       	ori	r24, 0x0D	; 13
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 1f0:	84 df       	rcall	.-248    	; 0xfa <i2c_write>
 1f2:	81 2f       	mov	r24, r17
 1f4:	82 df       	rcall	.-252    	; 0xfa <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f ea       	ldi	r24, 0xAF	; 175
 1f8:	94 e0       	ldi	r25, 0x04	; 4
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_printf+0x62>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_printf+0x68>
 200:	00 00       	nop
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 202:	90 e1       	ldi	r25, 0x10	; 16
 204:	09 9f       	mul	r16, r25
 206:	80 01       	movw	r16, r0
 208:	11 24       	eor	r1, r1
 20a:	10 2f       	mov	r17, r16
 20c:	19 60       	ori	r17, 0x09	; 9
 20e:	81 2f       	mov	r24, r17
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 210:	74 df       	rcall	.-280    	; 0xfa <i2c_write>
 212:	80 2f       	mov	r24, r16
 214:	8d 60       	ori	r24, 0x0D	; 13
 216:	71 df       	rcall	.-286    	; 0xfa <i2c_write>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 218:	81 2f       	mov	r24, r17
 21a:	6f df       	rcall	.-290    	; 0xfa <i2c_write>
 21c:	ef ea       	ldi	r30, 0xAF	; 175
 21e:	f4 e0       	ldi	r31, 0x04	; 4
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_printf+0x88>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_printf+0x8e>
 226:	00 00       	nop
 228:	f6 01       	movw	r30, r12

	lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
	for (char *it = string; *it; it++) {
 22a:	01 91       	ld	r16, Z+
 22c:	6f 01       	movw	r12, r30
 22e:	01 11       	cpse	r16, r1
 230:	d1 cf       	rjmp	.-94     	; 0x1d4 <lcd_printf+0x3c>
 232:	df 91       	pop	r29
	va_start(args, format);
	vsnprintf(lcd_buffer, LCD_COL_COUNT + 1, format, args);
	va_end(args);

	lcd_puts(lcd_buffer);
}
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	08 95       	ret

00000244 <lcd_init>:
 244:	0f 93       	push	r16


void lcd_init(void) {
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <lcd_init+0xe>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_init+0x18>
 25c:	00 00       	nop
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	4c df       	rcall	.-360    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 262:	8c e3       	ldi	r24, 0x3C	; 60
 264:	4a df       	rcall	.-364    	; 0xfa <i2c_write>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	48 df       	rcall	.-368    	; 0xfa <i2c_write>
 26a:	8f ea       	ldi	r24, 0xAF	; 175
 26c:	94 e0       	ldi	r25, 0x04	; 4
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x2a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x30>
 274:	00 00       	nop
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	90 e4       	ldi	r25, 0x40	; 64
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x36>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x3c>
 280:	00 00       	nop
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 282:	88 e3       	ldi	r24, 0x38	; 56
 284:	3a df       	rcall	.-396    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 286:	8c e3       	ldi	r24, 0x3C	; 60
 288:	38 df       	rcall	.-400    	; 0xfa <i2c_write>
 28a:	88 e3       	ldi	r24, 0x38	; 56
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 28c:	36 df       	rcall	.-404    	; 0xfa <i2c_write>
 28e:	8f ea       	ldi	r24, 0xAF	; 175
 290:	94 e0       	ldi	r25, 0x04	; 4
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x4e>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_init+0x54>
 298:	00 00       	nop
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	90 e4       	ldi	r25, 0x40	; 64
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0x5a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x60>
 2a4:	00 00       	nop
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	28 df       	rcall	.-432    	; 0xfa <i2c_write>
 2aa:	8c e3       	ldi	r24, 0x3C	; 60
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 2ac:	26 df       	rcall	.-436    	; 0xfa <i2c_write>
 2ae:	88 e3       	ldi	r24, 0x38	; 56
 2b0:	24 df       	rcall	.-440    	; 0xfa <i2c_write>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2b2:	8f ea       	ldi	r24, 0xAF	; 175
 2b4:	94 e0       	ldi	r25, 0x04	; 4
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_init+0x72>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_init+0x78>
 2bc:	00 00       	nop
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	90 e4       	ldi	r25, 0x40	; 64
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_init+0x7e>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_init+0x84>
 2c8:	00 00       	nop
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2ca:	88 e2       	ldi	r24, 0x28	; 40
 2cc:	16 df       	rcall	.-468    	; 0xfa <i2c_write>
 2ce:	8c e2       	ldi	r24, 0x2C	; 44
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 2d0:	14 df       	rcall	.-472    	; 0xfa <i2c_write>
 2d2:	88 e2       	ldi	r24, 0x28	; 40
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2d4:	12 df       	rcall	.-476    	; 0xfa <i2c_write>
 2d6:	8f ea       	ldi	r24, 0xAF	; 175
 2d8:	94 e0       	ldi	r25, 0x04	; 4
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x96>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0x9c>
 2e0:	00 00       	nop
 2e2:	88 e2       	ldi	r24, 0x28	; 40
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2e4:	0a df       	rcall	.-492    	; 0xfa <i2c_write>
 2e6:	8c e2       	ldi	r24, 0x2C	; 44
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 2e8:	08 df       	rcall	.-496    	; 0xfa <i2c_write>
 2ea:	88 e2       	ldi	r24, 0x28	; 40
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2ec:	06 df       	rcall	.-500    	; 0xfa <i2c_write>
 2ee:	8f ea       	ldi	r24, 0xAF	; 175
 2f0:	94 e0       	ldi	r25, 0x04	; 4
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_init+0xae>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <lcd_init+0xb4>
 2f8:	00 00       	nop
 2fa:	88 e8       	ldi	r24, 0x88	; 136
 2fc:	fe de       	rcall	.-516    	; 0xfa <i2c_write>
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 2fe:	8c e8       	ldi	r24, 0x8C	; 140
 300:	fc de       	rcall	.-520    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 302:	88 e8       	ldi	r24, 0x88	; 136
 304:	fa de       	rcall	.-524    	; 0xfa <i2c_write>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 306:	8f ea       	ldi	r24, 0xAF	; 175
 308:	94 e0       	ldi	r25, 0x04	; 4
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd_init+0xc6>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd_init+0xcc>
 310:	00 00       	nop
 312:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <lcd_displayparams>

  lcd_write_nibble(0x02, RS_OFF); // Set 8-bit mode (?)

  lcd_command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);

  lcd_displayparams = LCD_CURSOROFF | LCD_BLINKOFF;
 316:	88 e0       	ldi	r24, 0x08	; 8
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 318:	f0 de       	rcall	.-544    	; 0xfa <i2c_write>
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	ee de       	rcall	.-548    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	ec de       	rcall	.-552    	; 0xfa <i2c_write>
 322:	8f ea       	ldi	r24, 0xAF	; 175
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 324:	94 e0       	ldi	r25, 0x04	; 4
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init+0xe2>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init+0xe8>
 32c:	00 00       	nop
 32e:	88 e8       	ldi	r24, 0x88	; 136
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 330:	e4 de       	rcall	.-568    	; 0xfa <i2c_write>
 332:	8c e8       	ldi	r24, 0x8C	; 140
 334:	e2 de       	rcall	.-572    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 336:	88 e8       	ldi	r24, 0x88	; 136
 338:	e0 de       	rcall	.-576    	; 0xfa <i2c_write>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 33a:	8f ea       	ldi	r24, 0xAF	; 175
 33c:	94 e0       	ldi	r25, 0x04	; 4
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0xfa>
 342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_init+0x100>
 344:	00 00       	nop
 346:	88 e0       	ldi	r24, 0x08	; 8
 348:	d8 de       	rcall	.-592    	; 0xfa <i2c_write>
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	d6 de       	rcall	.-596    	; 0xfa <i2c_write>
 34e:	88 e0       	ldi	r24, 0x08	; 8
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 350:	d4 de       	rcall	.-600    	; 0xfa <i2c_write>
 352:	8f ea       	ldi	r24, 0xAF	; 175
 354:	94 e0       	ldi	r25, 0x04	; 4
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <lcd_init+0x112>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_init+0x118>
 35c:	00 00       	nop
 35e:	88 e1       	ldi	r24, 0x18	; 24
 360:	cc de       	rcall	.-616    	; 0xfa <i2c_write>
 362:	8c e1       	ldi	r24, 0x1C	; 28
 364:	ca de       	rcall	.-620    	; 0xfa <i2c_write>
 366:	88 e1       	ldi	r24, 0x18	; 24
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 368:	c8 de       	rcall	.-624    	; 0xfa <i2c_write>
 36a:	8f ea       	ldi	r24, 0xAF	; 175
 36c:	94 e0       	ldi	r25, 0x04	; 4
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <lcd_init+0x12a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_init+0x130>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 374:	00 00       	nop
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	9f e1       	ldi	r25, 0x1F	; 31
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_init+0x136>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <lcd_init+0x13c>
 380:	00 00       	nop
 382:	c0 91 5f 01 	lds	r28, 0x015F	; 0x80015f <lcd_displayparams>
 386:	8c 2f       	mov	r24, r28
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <lcd_displayparams>
void lcd_scroll_right(void) {
	lcd_command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void lcd_set_left_to_right(void) {
	lcd_displayparams |= LCD_ENTRYLEFT;
 38e:	c6 60       	ori	r28, 0x06	; 6
 390:	0c 2f       	mov	r16, r28
 392:	02 95       	swap	r16
 394:	0f 70       	andi	r16, 0x0F	; 15
 396:	90 e1       	ldi	r25, 0x10	; 16
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 398:	09 9f       	mul	r16, r25
 39a:	80 01       	movw	r16, r0
 39c:	11 24       	eor	r1, r1
 39e:	d0 2f       	mov	r29, r16
 3a0:	d8 60       	ori	r29, 0x08	; 8
 3a2:	8d 2f       	mov	r24, r29
 3a4:	aa de       	rcall	.-684    	; 0xfa <i2c_write>
 3a6:	80 2f       	mov	r24, r16
 3a8:	8c 60       	ori	r24, 0x0C	; 12
 3aa:	a7 de       	rcall	.-690    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 3ac:	8d 2f       	mov	r24, r29
 3ae:	a5 de       	rcall	.-694    	; 0xfa <i2c_write>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 3b0:	8f ea       	ldi	r24, 0xAF	; 175
 3b2:	94 e0       	ldi	r25, 0x04	; 4
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_init+0x170>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <lcd_init+0x176>
 3ba:	00 00       	nop
 3bc:	90 e1       	ldi	r25, 0x10	; 16
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 3be:	c9 9f       	mul	r28, r25
 3c0:	e0 01       	movw	r28, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	dc 2f       	mov	r29, r28
 3c6:	d8 60       	ori	r29, 0x08	; 8
 3c8:	8d 2f       	mov	r24, r29
 3ca:	97 de       	rcall	.-722    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 3cc:	8c 2f       	mov	r24, r28
 3ce:	8c 60       	ori	r24, 0x0C	; 12
 3d0:	94 de       	rcall	.-728    	; 0xfa <i2c_write>
 3d2:	8d 2f       	mov	r24, r29
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 3d4:	92 de       	rcall	.-732    	; 0xfa <i2c_write>
 3d6:	8f ea       	ldi	r24, 0xAF	; 175
 3d8:	94 e0       	ldi	r25, 0x04	; 4
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_init+0x196>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <lcd_init+0x19c>
 3e0:	00 00       	nop
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	8a de       	rcall	.-748    	; 0xfa <i2c_write>
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	88 de       	rcall	.-752    	; 0xfa <i2c_write>
 3ea:	88 e0       	ldi	r24, 0x08	; 8
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 3ec:	86 de       	rcall	.-756    	; 0xfa <i2c_write>
 3ee:	8f ea       	ldi	r24, 0xAF	; 175
 3f0:	94 e0       	ldi	r25, 0x04	; 4
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_init+0x1ae>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <lcd_init+0x1b4>
 3f8:	00 00       	nop
 3fa:	88 e2       	ldi	r24, 0x28	; 40
 3fc:	7e de       	rcall	.-772    	; 0xfa <i2c_write>
 3fe:	8c e2       	ldi	r24, 0x2C	; 44
 400:	7c de       	rcall	.-776    	; 0xfa <i2c_write>
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 402:	88 e2       	ldi	r24, 0x28	; 40
 404:	7a de       	rcall	.-780    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 406:	8f ea       	ldi	r24, 0xAF	; 175
 408:	94 e0       	ldi	r25, 0x04	; 4
 40a:	01 97       	sbiw	r24, 0x01	; 1
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	8f e3       	ldi	r24, 0x3F	; 63
 414:	9f e1       	ldi	r25, 0x1F	; 31
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	c0 91 5f 01 	lds	r28, 0x015F	; 0x80015f <lcd_displayparams>
 422:	8c 2f       	mov	r24, r28
 424:	84 60       	ori	r24, 0x04	; 4
  lcd_send(value, RS_ON);
}


void lcd_on(void) {
	lcd_displayparams |= LCD_DISPLAYON;
 426:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <lcd_displayparams>
 42a:	cc 60       	ori	r28, 0x0C	; 12
 42c:	0c 2f       	mov	r16, r28
 42e:	02 95       	swap	r16
 430:	0f 70       	andi	r16, 0x0F	; 15
	lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 432:	90 e1       	ldi	r25, 0x10	; 16
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 434:	09 9f       	mul	r16, r25
 436:	80 01       	movw	r16, r0
 438:	11 24       	eor	r1, r1
 43a:	d0 2f       	mov	r29, r16
 43c:	d8 60       	ori	r29, 0x08	; 8
 43e:	8d 2f       	mov	r24, r29
 440:	5c de       	rcall	.-840    	; 0xfa <i2c_write>
 442:	80 2f       	mov	r24, r16
 444:	8c 60       	ori	r24, 0x0C	; 12
 446:	59 de       	rcall	.-846    	; 0xfa <i2c_write>
 448:	8d 2f       	mov	r24, r29
 44a:	57 de       	rcall	.-850    	; 0xfa <i2c_write>
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 44c:	8f ea       	ldi	r24, 0xAF	; 175
 44e:	94 e0       	ldi	r25, 0x04	; 4
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
 458:	90 e1       	ldi	r25, 0x10	; 16
 45a:	c9 9f       	mul	r28, r25
 45c:	e0 01       	movw	r28, r0
 45e:	11 24       	eor	r1, r1
 460:	dc 2f       	mov	r29, r28
 462:	d8 60       	ori	r29, 0x08	; 8
 464:	8d 2f       	mov	r24, r29
#define RS_OFF 0x00
#define EN_ON (1 << LCD_EN)
#define EN_OFF 0x00

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 466:	49 de       	rcall	.-878    	; 0xfa <i2c_write>
 468:	8c 2f       	mov	r24, r28
 46a:	8c 60       	ori	r24, 0x0C	; 12
 46c:	46 de       	rcall	.-884    	; 0xfa <i2c_write>
 46e:	8d 2f       	mov	r24, r29
 470:	44 de       	rcall	.-888    	; 0xfa <i2c_write>
 472:	8f ea       	ldi	r24, 0xAF	; 175
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	01 97       	sbiw	r24, 0x01	; 1
	i2c_write(rs | EN_ON | BACKLIGHT_ON | (nibble << 4));
 478:	f1 f7       	brne	.-4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
 47e:	df 91       	pop	r29
	i2c_write(rs | EN_OFF | BACKLIGHT_ON | (nibble << 4));
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <__vector_1>:
static volatile uint16_t current_spindle_angle_overflow; // can overflow
static volatile uint16_t current_spindle_absolute_position;
static volatile uint16_t end_position = UINT16_MAX;

//Rotary Encoder interrupt
ISR(INT0_vect) { //Interrupt Vectors in ATmega328P - page 48
 488:	1f 92       	push	r1
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	0f 92       	push	r0
 490:	11 24       	eor	r1, r1
 492:	2f 93       	push	r18
 494:	3f 93       	push	r19
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
	if (PIND & (1 << PD3)) { // rotating left or right?
 49a:	4b 9b       	sbis	0x09, 3	; 9
 49c:	35 c0       	rjmp	.+106    	; 0x508 <__vector_1+0x80>
		current_direction = true;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_direction>
		current_spindle_angle_overflow++;
 4a4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <current_spindle_angle_overflow>
 4a8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <current_spindle_angle_overflow+0x1>
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <current_spindle_angle_overflow+0x1>
 4b2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <current_spindle_angle_overflow>
		if (current_spindle_angle < STEPS_FOR_ONE_TURN - 1) {
 4b6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <current_spindle_angle>
 4ba:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <current_spindle_angle+0x1>
 4be:	87 35       	cpi	r24, 0x57	; 87
 4c0:	92 40       	sbci	r25, 0x02	; 2
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <__vector_1+0x3e>
 4c4:	52 c0       	rjmp	.+164    	; 0x56a <__vector_1+0xe2>
			current_spindle_angle++;
		} else {
			current_spindle_angle = 0;
 4c6:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <current_spindle_angle+0x1>
 4ca:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <current_spindle_angle>
			if (current_spindle_absolute_position < end_position) {
 4ce:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <current_spindle_absolute_position>
 4d2:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <current_spindle_absolute_position+0x1>
 4d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <end_position>
 4da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <end_position+0x1>
 4de:	28 17       	cp	r18, r24
 4e0:	39 07       	cpc	r19, r25
 4e2:	48 f4       	brcc	.+18     	; 0x4f6 <__vector_1+0x6e>
				current_spindle_absolute_position++;
 4e4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <current_spindle_absolute_position>
 4e8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <current_spindle_absolute_position+0x1>
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <current_spindle_absolute_position+0x1>
 4f2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <current_spindle_absolute_position>
			if (current_spindle_absolute_position > 0) {
				current_spindle_absolute_position--;
			}
		}
	}
}
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	3f 91       	pop	r19
 4fc:	2f 91       	pop	r18
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti
			if (current_spindle_absolute_position < end_position) {
				current_spindle_absolute_position++;
			}
		}
	} else {
		current_direction = false;
 508:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_direction>
		current_spindle_angle_overflow--;
 50c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <current_spindle_angle_overflow>
 510:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <current_spindle_angle_overflow+0x1>
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <current_spindle_angle_overflow+0x1>
 51a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <current_spindle_angle_overflow>
		if (current_spindle_angle > 0) {
 51e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <current_spindle_angle>
 522:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <current_spindle_angle+0x1>
 526:	89 2b       	or	r24, r25
 528:	b1 f4       	brne	.+44     	; 0x556 <__vector_1+0xce>
			current_spindle_angle--;
		} else {
			current_spindle_angle = STEPS_FOR_ONE_TURN - 1;
 52a:	87 e5       	ldi	r24, 0x57	; 87
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <current_spindle_angle+0x1>
 532:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <current_spindle_angle>
			if (current_spindle_absolute_position > 0) {
 536:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <current_spindle_absolute_position>
 53a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <current_spindle_absolute_position+0x1>
 53e:	89 2b       	or	r24, r25
 540:	d1 f2       	breq	.-76     	; 0x4f6 <__vector_1+0x6e>
				current_spindle_absolute_position--;
 542:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <current_spindle_absolute_position>
 546:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <current_spindle_absolute_position+0x1>
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <current_spindle_absolute_position+0x1>
 550:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <current_spindle_absolute_position>
			}
		}
	}
}
 554:	d0 cf       	rjmp	.-96     	; 0x4f6 <__vector_1+0x6e>
		}
	} else {
		current_direction = false;
		current_spindle_angle_overflow--;
		if (current_spindle_angle > 0) {
			current_spindle_angle--;
 556:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <current_spindle_angle>
 55a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <current_spindle_angle+0x1>
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <current_spindle_angle+0x1>
 564:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <current_spindle_angle>
 568:	c6 cf       	rjmp	.-116    	; 0x4f6 <__vector_1+0x6e>
ISR(INT0_vect) { //Interrupt Vectors in ATmega328P - page 48
	if (PIND & (1 << PD3)) { // rotating left or right?
		current_direction = true;
		current_spindle_angle_overflow++;
		if (current_spindle_angle < STEPS_FOR_ONE_TURN - 1) {
			current_spindle_angle++;
 56a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <current_spindle_angle>
 56e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <current_spindle_angle+0x1>
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <current_spindle_angle+0x1>
 578:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <current_spindle_angle>
 57c:	bc cf       	rjmp	.-136    	; 0x4f6 <__vector_1+0x6e>

0000057e <__vector_11>:
	uint32_t requeired_support_position_tmp = ((((uint32_t)tmp_current_position) * STEPS_FOR_ONE_TURN + tmp_current_angle) * step_multiplier) / step_divisor;
	requeired_support_position = requeired_support_position_tmp;
	stepper_motor_move_towards(requeired_support_position_tmp);
}

ISR(TIMER1_COMPA_vect) { // called as fast as stepper motor can handle 
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	2f 93       	push	r18
 592:	3f 93       	push	r19
 594:	4f 93       	push	r20
 596:	5f 93       	push	r21
 598:	6f 93       	push	r22
 59a:	7f 93       	push	r23
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	af 93       	push	r26
 5a2:	bf 93       	push	r27
 5a4:	ef 93       	push	r30
 5a6:	ff 93       	push	r31
}

static void recalculate_support_position() {
	uint16_t tmp_current_position;
	uint16_t tmp_current_angle;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 5a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5aa:	f8 94       	cli
		tmp_current_position = current_spindle_absolute_position;
 5ac:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <current_spindle_absolute_position>
 5b0:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <current_spindle_absolute_position+0x1>
		tmp_current_angle = current_spindle_angle;
 5b4:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <current_spindle_angle>
 5b8:	50 91 73 01 	lds	r21, 0x0173	; 0x800173 <current_spindle_angle+0x1>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5bc:	8f bf       	out	0x3f, r24	; 63
	}
		
	if (tmp_current_position == 0) {
 5be:	21 15       	cp	r18, r1
 5c0:	31 05       	cpc	r19, r1
 5c2:	b1 f0       	breq	.+44     	; 0x5f0 <__vector_11+0x72>
		tmp_current_angle = 0;
	} else if (tmp_current_position >= end_position)  {
 5c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <end_position>
 5c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <end_position+0x1>
 5cc:	28 17       	cp	r18, r24
 5ce:	39 07       	cpc	r19, r25
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__vector_11+0x56>
 5d2:	62 c0       	rjmp	.+196    	; 0x698 <__vector_11+0x11a>
		tmp_current_angle = 0;
	} else {
		tmp_current_position--; //preskocime pozici 0, protoze tu nepouzivame pro posuv supportu
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	31 09       	sbc	r19, r1
 5d8:	a8 e5       	ldi	r26, 0x58	; 88
 5da:	b2 e0       	ldi	r27, 0x02	; 2
 5dc:	90 d1       	rcall	.+800    	; 0x8fe <__umulhisi3>
 5de:	7b 01       	movw	r14, r22
 5e0:	8c 01       	movw	r16, r24
 5e2:	e4 0e       	add	r14, r20
 5e4:	f5 1e       	adc	r15, r21
 5e6:	01 1d       	adc	r16, r1
 5e8:	11 1d       	adc	r17, r1
 5ea:	a8 01       	movw	r20, r16
 5ec:	97 01       	movw	r18, r14
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <__vector_11+0x78>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		tmp_current_position = current_spindle_absolute_position;
		tmp_current_angle = current_spindle_angle;
	}
		
	if (tmp_current_position == 0) {
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	a9 01       	movw	r20, r18
		tmp_current_angle = 0;
	} else {
		tmp_current_position--; //preskocime pozici 0, protoze tu nepouzivame pro posuv supportu
	}
		
	uint32_t requeired_support_position_tmp = ((((uint32_t)tmp_current_position) * STEPS_FOR_ONE_TURN + tmp_current_angle) * step_multiplier) / step_divisor;
 5f6:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <step_multiplier>
 5fa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	8d d1       	rcall	.+794    	; 0x91c <__muluhisi3>
 602:	2e 2f       	mov	r18, r30
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	57 d1       	rcall	.+686    	; 0x8ba <__udivmodsi4>
	requeired_support_position = requeired_support_position_tmp;
 60c:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <requeired_support_position>
 610:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <requeired_support_position+0x1>
 614:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <requeired_support_position+0x2>
 618:	50 93 69 01 	sts	0x0169, r21	; 0x800169 <requeired_support_position+0x3>
static uint8_t stepper_motor_move_was_finished() {
	return PORTD & (1 << PORTD5);
}

static void stepper_motor_move_towards(uint32_t required) {
	if (!stepper_motor_move_was_finished()) {
 61c:	5d 9b       	sbis	0x0b, 5	; 11
 61e:	58 c0       	rjmp	.+176    	; 0x6d0 <__vector_11+0x152>
		stepper_motor_finish_move();
	} else {
		if (stepper_motor_absolute_position < required) {
 620:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <stepper_motor_absolute_position>
 624:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <stepper_motor_absolute_position+0x1>
 628:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <stepper_motor_absolute_position+0x2>
 62c:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <stepper_motor_absolute_position+0x3>
 630:	82 17       	cp	r24, r18
 632:	93 07       	cpc	r25, r19
 634:	a4 07       	cpc	r26, r20
 636:	b5 07       	cpc	r27, r21
 638:	a8 f1       	brcs	.+106    	; 0x6a4 <__vector_11+0x126>
			stepper_motor_move_step_left();
			stepper_motor_absolute_position++;
		} else if (stepper_motor_absolute_position > required) {
 63a:	28 17       	cp	r18, r24
 63c:	39 07       	cpc	r19, r25
 63e:	4a 07       	cpc	r20, r26
 640:	5b 07       	cpc	r21, r27
 642:	a8 f4       	brcc	.+42     	; 0x66e <__vector_11+0xf0>
	PORTC |= 1 << PORTC0;
	PORTD &= ~(1 << PORTD5);
}

static void stepper_motor_move_step_right() {
	PORTC &= ~(1 << PORTC0);
 644:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~(1 << PORTD5);
 646:	5d 98       	cbi	0x0b, 5	; 11
		if (stepper_motor_absolute_position < required) {
			stepper_motor_move_step_left();
			stepper_motor_absolute_position++;
		} else if (stepper_motor_absolute_position > required) {
			stepper_motor_move_step_right();
			stepper_motor_absolute_position--;
 648:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <stepper_motor_absolute_position>
 64c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <stepper_motor_absolute_position+0x1>
 650:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <stepper_motor_absolute_position+0x2>
 654:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <stepper_motor_absolute_position+0x3>
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	a1 09       	sbc	r26, r1
 65c:	b1 09       	sbc	r27, r1
 65e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <stepper_motor_absolute_position>
 662:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <stepper_motor_absolute_position+0x1>
 666:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <stepper_motor_absolute_position+0x2>
 66a:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <stepper_motor_absolute_position+0x3>
}

ISR(TIMER1_COMPA_vect) { // called as fast as stepper motor can handle 
	recalculate_support_position();
	//PORTD ^= (1 << PORTD5); //for testing
}
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	7f 91       	pop	r23
 67c:	6f 91       	pop	r22
 67e:	5f 91       	pop	r21
 680:	4f 91       	pop	r20
 682:	3f 91       	pop	r19
 684:	2f 91       	pop	r18
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti
 698:	a8 e5       	ldi	r26, 0x58	; 88
 69a:	b2 e0       	ldi	r27, 0x02	; 2
 69c:	30 d1       	rcall	.+608    	; 0x8fe <__umulhisi3>
 69e:	9b 01       	movw	r18, r22
 6a0:	ac 01       	movw	r20, r24
 6a2:	a9 cf       	rjmp	.-174    	; 0x5f6 <__vector_11+0x78>
	DDRC |= 1 << DDC0; // Driver Direction
	PORTC |= 1 << PORTC2; // Driver Enable -> 1 = enabled
}

static void stepper_motor_move_step_left() {
	PORTC |= 1 << PORTC0;
 6a4:	40 9a       	sbi	0x08, 0	; 8
	PORTD &= ~(1 << PORTD5);
 6a6:	5d 98       	cbi	0x0b, 5	; 11
	if (!stepper_motor_move_was_finished()) {
		stepper_motor_finish_move();
	} else {
		if (stepper_motor_absolute_position < required) {
			stepper_motor_move_step_left();
			stepper_motor_absolute_position++;
 6a8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <stepper_motor_absolute_position>
 6ac:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <stepper_motor_absolute_position+0x1>
 6b0:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <stepper_motor_absolute_position+0x2>
 6b4:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <stepper_motor_absolute_position+0x3>
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	a1 1d       	adc	r26, r1
 6bc:	b1 1d       	adc	r27, r1
 6be:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <stepper_motor_absolute_position>
 6c2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <stepper_motor_absolute_position+0x1>
 6c6:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <stepper_motor_absolute_position+0x2>
 6ca:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <stepper_motor_absolute_position+0x3>
 6ce:	cf cf       	rjmp	.-98     	; 0x66e <__vector_11+0xf0>
	PORTC &= ~(1 << PORTC0);
	PORTD &= ~(1 << PORTD5);
}

static void stepper_motor_finish_move() {
	PORTD |= 1 << PORTD5;
 6d0:	5d 9a       	sbi	0x0b, 5	; 11
 6d2:	cd cf       	rjmp	.-102    	; 0x66e <__vector_11+0xf0>

000006d4 <__vector_7>:
	TCCR2A = 1 << WGM21; // Clear Timer on Compare Match (CTC) Mode
	TCCR2B = (1 << CS22) | (1 << CS20); // CLK / 128x
	TIMSK2 = 1 << OCIE2A; // enable interrupt
}

ISR(TIMER2_COMPA_vect) { // once per 1ms
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
	if (one_ms_to_one_second++ == 1000u) {
 6fa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <one_ms_to_one_second>
 6fe:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <one_ms_to_one_second+0x1>
 702:	88 3e       	cpi	r24, 0xE8	; 232
 704:	23 e0       	ldi	r18, 0x03	; 3
 706:	92 07       	cpc	r25, r18
 708:	c1 f0       	breq	.+48     	; 0x73a <__vector_7+0x66>
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <one_ms_to_one_second+0x1>
 710:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <one_ms_to_one_second>
		
		previous_spindle_revolutions = tmp;
				
		led_toggle();
	}
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	bf 91       	pop	r27
 71e:	af 91       	pop	r26
 720:	9f 91       	pop	r25
 722:	8f 91       	pop	r24
 724:	7f 91       	pop	r23
 726:	6f 91       	pop	r22
 728:	5f 91       	pop	r21
 72a:	4f 91       	pop	r20
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti
	TIMSK2 = 1 << OCIE2A; // enable interrupt
}

ISR(TIMER2_COMPA_vect) { // once per 1ms
	if (one_ms_to_one_second++ == 1000u) {
		one_ms_to_one_second = 0; // once per second
 73a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <one_ms_to_one_second+0x1>
 73e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <one_ms_to_one_second>
		
		uint16_t tmp = current_spindle_angle_overflow;
 742:	c0 91 70 01 	lds	r28, 0x0170	; 0x800170 <current_spindle_angle_overflow>
 746:	d0 91 71 01 	lds	r29, 0x0171	; 0x800171 <current_spindle_angle_overflow+0x1>
		
		uint16_t angle_increment_per_second = tmp - previous_spindle_revolutions;
 74a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <previous_spindle_revolutions>
 74e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <previous_spindle_revolutions+0x1>
 752:	9e 01       	movw	r18, r28
 754:	28 1b       	sub	r18, r24
 756:	39 0b       	sbc	r19, r25
		uint32_t angle_increment_per_minute = 60lu * angle_increment_per_second;
		int16_t spindle_revolutions_per_minute_abs = angle_increment_per_minute / STEPS_FOR_ONE_TURN;
 758:	ac e3       	ldi	r26, 0x3C	; 60
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	d0 d0       	rcall	.+416    	; 0x8fe <__umulhisi3>
 75e:	28 e5       	ldi	r18, 0x58	; 88
 760:	32 e0       	ldi	r19, 0x02	; 2
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	a9 d0       	rcall	.+338    	; 0x8ba <__udivmodsi4>
		if (current_direction) {
 768:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_direction>
 76c:	88 23       	and	r24, r24
 76e:	69 f0       	breq	.+26     	; 0x78a <__vector_7+0xb6>
			spindle_revolutions_per_minute = spindle_revolutions_per_minute_abs;
		} else {
			spindle_revolutions_per_minute = -spindle_revolutions_per_minute_abs;	
 770:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <spindle_revolutions_per_minute+0x1>
 774:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <spindle_revolutions_per_minute>
		}
		
		previous_spindle_revolutions = tmp;
 778:	d0 93 63 01 	sts	0x0163, r29	; 0x800163 <previous_spindle_revolutions+0x1>
 77c:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <previous_spindle_revolutions>
static void led_on() {
	PORTB |= 1 << PORTB5;
}

static void led_toggle() {
	PORTB ^= 1 << PORTB5;
 780:	95 b1       	in	r25, 0x05	; 5
 782:	80 e2       	ldi	r24, 0x20	; 32
 784:	89 27       	eor	r24, r25
 786:	85 b9       	out	0x05, r24	; 5
		
		previous_spindle_revolutions = tmp;
				
		led_toggle();
	}
}
 788:	c5 cf       	rjmp	.-118    	; 0x714 <__vector_7+0x40>
		uint32_t angle_increment_per_minute = 60lu * angle_increment_per_second;
		int16_t spindle_revolutions_per_minute_abs = angle_increment_per_minute / STEPS_FOR_ONE_TURN;
		if (current_direction) {
			spindle_revolutions_per_minute = spindle_revolutions_per_minute_abs;
		} else {
			spindle_revolutions_per_minute = -spindle_revolutions_per_minute_abs;	
 78a:	31 95       	neg	r19
 78c:	21 95       	neg	r18
 78e:	31 09       	sbc	r19, r1
 790:	ef cf       	rjmp	.-34     	; 0x770 <__vector_7+0x9c>

00000792 <main>:
#define COUNTER_MATCH_VALUE 127
//#define COUNTER_SET_VALUE (COUNTER_MATCH_VALUE - 1)
#define COUNTER_SET_VALUE 126

int main(void) {
	PORTB = 0xFF; /* enable pull up on PORTB */
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF; /* enable pull up on PORTC */
 796:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF; /* enable pull up on PORTD */
 798:	8b b9       	out	0x0b, r24	; 11

#define STEPS_FOR_ONE_TURN 600u

/******* On board led ******/
static void led_init() {
	DDRB |= 1 << DDB5;
 79a:	25 9a       	sbi	0x04, 5	; 4

/******* stepper-motor ***************/
static uint32_t stepper_motor_absolute_position = 0;

static void stepper_motor_init() {
	DDRC |= 1 << DDC2; // Driver Enable
 79c:	3a 9a       	sbi	0x07, 2	; 7
	DDRD |= 1 << DDD5; // Driver Pulse
 79e:	55 9a       	sbi	0x0a, 5	; 10
	DDRC |= 1 << DDC0; // Driver Direction
 7a0:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1 << PORTC2; // Driver Enable -> 1 = enabled
 7a2:	42 9a       	sbi	0x08, 2	; 8
	}
}

static void init_step_counting() {
	// Phase wire 1 - External Interrupts External Interrupts - page 58
	EICRA |= (1 << ISC01) | (1 << ISC00); // INT0 on rising edge
 7a4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 7a8:	83 60       	ori	r24, 0x03	; 3
 7aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK |= (1 << INT0); // Enable INT0
 7ae:	e8 9a       	sbi	0x1d, 0	; 29
	
	// Phase wire 2 
	DDRD &= ~(1 << PD3); // PORTD PIN1 as input
 7b0:	53 98       	cbi	0x0a, 3	; 10
static volatile uint8_t step_multiplier = 123u;
static volatile uint8_t step_divisor = 123u;
static volatile uint32_t requeired_support_position = 0;

static void init_support_position_recalculation() {
	OCR1AH = 0x00; 
 7b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = SUPPORT_RECALCULATION_SPEED;
 7b6:	88 ec       	ldi	r24, 0xC8	; 200
 7b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1A = 0x00; // Clear Timer on Compare Match (CTC) Mode
 7bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << CS10) | (1 << CS11) | (1 << WGM12); // CLK / 64x
 7c0:	8b e0       	ldi	r24, 0x0B	; 11
 7c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = 1 << OCIE1A; // enable interrupt  /* TODO bug? */
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
static volatile int16_t spindle_revolutions_per_minute = 0;
static uint16_t previous_spindle_revolutions = 0;
static uint16_t one_ms_to_one_second = 0;

static void init_revolution_calculation(void) {
	OCR2A = 125u; // 16 MHz / 128 / 125 = 1 ms
 7cc:	9d e7       	ldi	r25, 0x7D	; 125
 7ce:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TCCR2A = 1 << WGM21; // Clear Timer on Compare Match (CTC) Mode
 7d2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = (1 << CS22) | (1 << CS20); // CLK / 128x
 7d6:	95 e0       	ldi	r25, 0x05	; 5
 7d8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = 1 << OCIE2A; // enable interrupt
 7dc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	led_init();
	stepper_motor_init();
	init_step_counting();
	init_support_position_recalculation();
	init_revolution_calculation();
	i2c_init();
 7e0:	5f dc       	rcall	.-1858   	; 0xa0 <i2c_init>
	i2c_start_wait(LCD_DISPLAY_ADDRESS << 1 | I2C_WRITE);	
 7e2:	8e e4       	ldi	r24, 0x4E	; 78
	lcd_init();
 7e4:	63 dc       	rcall	.-1850   	; 0xac <i2c_start_wait>
 7e6:	2e dd       	rcall	.-1444   	; 0x244 <lcd_init>
	sei(); // enable interrupts
 7e8:	78 94       	sei

	
	
	
	
	DDRB |= 1 << DDB5;
 7ea:	25 9a       	sbi	0x04, 5	; 4
    while (1) {

						lcd_set_cursor(0, 0);
						lcd_printf("vreteno:  %-5u %3u", current_spindle_angle, current_spindle_absolute_position);
 7ec:	89 e0       	ldi	r24, 0x09	; 9
 7ee:	c8 2e       	mov	r12, r24
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	d8 2e       	mov	r13, r24
						lcd_set_cursor(0, 1);
						lcd_printf("            %i ot/min", spindle_revolutions_per_minute);
 7f4:	9c e1       	ldi	r25, 0x1C	; 28
 7f6:	e9 2e       	mov	r14, r25
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	f9 2e       	mov	r15, r25
						lcd_set_cursor(0, 2);
						lcd_printf("support: %-lu", stepper_motor_absolute_position);
 7fc:	02 e3       	ldi	r16, 0x32	; 50
 7fe:	11 e0       	ldi	r17, 0x01	; 1
						lcd_set_cursor(0, 3);
						lcd_printf("%8i %-lu", (int16_t) (requeired_support_position - stepper_motor_absolute_position), requeired_support_position);
 800:	c0 e4       	ldi	r28, 0x40	; 64
	
	
	DDRB |= 1 << DDB5;
    while (1) {

						lcd_set_cursor(0, 0);
 802:	d1 e0       	ldi	r29, 0x01	; 1
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	8a dc       	rcall	.-1772   	; 0x11e <lcd_set_cursor>
						lcd_printf("vreteno:  %-5u %3u", current_spindle_angle, current_spindle_absolute_position);
 80a:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <current_spindle_absolute_position>
 80e:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <current_spindle_absolute_position+0x1>
 812:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <current_spindle_angle>
 816:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <current_spindle_angle+0x1>
 81a:	3f 93       	push	r19
 81c:	2f 93       	push	r18
 81e:	9f 93       	push	r25
 820:	8f 93       	push	r24
 822:	df 92       	push	r13
 824:	cf 92       	push	r12
						lcd_set_cursor(0, 1);
 826:	b8 dc       	rcall	.-1680   	; 0x198 <lcd_printf>
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	78 dc       	rcall	.-1808   	; 0x11e <lcd_set_cursor>
						lcd_printf("            %i ot/min", spindle_revolutions_per_minute);
 82e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <spindle_revolutions_per_minute>
 832:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <spindle_revolutions_per_minute+0x1>
 836:	9f 93       	push	r25
 838:	8f 93       	push	r24
 83a:	ff 92       	push	r15
 83c:	ef 92       	push	r14
						lcd_set_cursor(0, 2);
 83e:	ac dc       	rcall	.-1704   	; 0x198 <lcd_printf>
 840:	62 e0       	ldi	r22, 0x02	; 2
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	6c dc       	rcall	.-1832   	; 0x11e <lcd_set_cursor>
						lcd_printf("support: %-lu", stepper_motor_absolute_position);
 846:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <stepper_motor_absolute_position+0x3>
 84a:	8f 93       	push	r24
 84c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <stepper_motor_absolute_position+0x2>
 850:	8f 93       	push	r24
 852:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <stepper_motor_absolute_position+0x1>
 856:	8f 93       	push	r24
 858:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <stepper_motor_absolute_position>
 85c:	8f 93       	push	r24
 85e:	1f 93       	push	r17
 860:	0f 93       	push	r16
						lcd_set_cursor(0, 3);
 862:	9a dc       	rcall	.-1740   	; 0x198 <lcd_printf>
 864:	63 e0       	ldi	r22, 0x03	; 3
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	5a dc       	rcall	.-1868   	; 0x11e <lcd_set_cursor>
						lcd_printf("%8i %-lu", (int16_t) (requeired_support_position - stepper_motor_absolute_position), requeired_support_position);
 86a:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <requeired_support_position>
 86e:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <requeired_support_position+0x1>
 872:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <requeired_support_position+0x2>
 876:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <requeired_support_position+0x3>
 87a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <requeired_support_position>
 87e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <requeired_support_position+0x1>
 882:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <requeired_support_position+0x2>
 886:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <requeired_support_position+0x3>
 88a:	7f 93       	push	r23
 88c:	6f 93       	push	r22
 88e:	5f 93       	push	r21
 890:	4f 93       	push	r20
 892:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <stepper_motor_absolute_position>
 896:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <stepper_motor_absolute_position+0x1>
 89a:	82 1b       	sub	r24, r18
 89c:	93 0b       	sbc	r25, r19
 89e:	9f 93       	push	r25
 8a0:	8f 93       	push	r24
 8a2:	df 93       	push	r29
 8a4:	cf 93       	push	r28
 8a6:	78 dc       	rcall	.-1808   	; 0x198 <lcd_printf>
 8a8:	8d b7       	in	r24, 0x3d	; 61
 8aa:	9e b7       	in	r25, 0x3e	; 62
 8ac:	48 96       	adiw	r24, 0x18	; 24
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	9e bf       	out	0x3e, r25	; 62
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	8d bf       	out	0x3d, r24	; 61
 8b8:	a5 cf       	rjmp	.-182    	; 0x804 <main+0x72>

000008ba <__udivmodsi4>:
 8ba:	a1 e2       	ldi	r26, 0x21	; 33
 8bc:	1a 2e       	mov	r1, r26
 8be:	aa 1b       	sub	r26, r26
 8c0:	bb 1b       	sub	r27, r27
 8c2:	fd 01       	movw	r30, r26
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <__udivmodsi4_ep>

000008c6 <__udivmodsi4_loop>:
 8c6:	aa 1f       	adc	r26, r26
 8c8:	bb 1f       	adc	r27, r27
 8ca:	ee 1f       	adc	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	a2 17       	cp	r26, r18
 8d0:	b3 07       	cpc	r27, r19
 8d2:	e4 07       	cpc	r30, r20
 8d4:	f5 07       	cpc	r31, r21
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__udivmodsi4_ep>
 8d8:	a2 1b       	sub	r26, r18
 8da:	b3 0b       	sbc	r27, r19
 8dc:	e4 0b       	sbc	r30, r20
 8de:	f5 0b       	sbc	r31, r21

000008e0 <__udivmodsi4_ep>:
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	1a 94       	dec	r1
 8ea:	69 f7       	brne	.-38     	; 0x8c6 <__udivmodsi4_loop>
 8ec:	60 95       	com	r22
 8ee:	70 95       	com	r23
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	9b 01       	movw	r18, r22
 8f6:	ac 01       	movw	r20, r24
 8f8:	bd 01       	movw	r22, r26
 8fa:	cf 01       	movw	r24, r30
 8fc:	08 95       	ret

000008fe <__umulhisi3>:
 8fe:	a2 9f       	mul	r26, r18
 900:	b0 01       	movw	r22, r0
 902:	b3 9f       	mul	r27, r19
 904:	c0 01       	movw	r24, r0
 906:	a3 9f       	mul	r26, r19
 908:	70 0d       	add	r23, r0
 90a:	81 1d       	adc	r24, r1
 90c:	11 24       	eor	r1, r1
 90e:	91 1d       	adc	r25, r1
 910:	b2 9f       	mul	r27, r18
 912:	70 0d       	add	r23, r0
 914:	81 1d       	adc	r24, r1
 916:	11 24       	eor	r1, r1
 918:	91 1d       	adc	r25, r1
 91a:	08 95       	ret

0000091c <__muluhisi3>:
 91c:	f0 df       	rcall	.-32     	; 0x8fe <__umulhisi3>
 91e:	a5 9f       	mul	r26, r21
 920:	90 0d       	add	r25, r0
 922:	b4 9f       	mul	r27, r20
 924:	90 0d       	add	r25, r0
 926:	a4 9f       	mul	r26, r20
 928:	80 0d       	add	r24, r0
 92a:	91 1d       	adc	r25, r1
 92c:	11 24       	eor	r1, r1
 92e:	08 95       	ret

00000930 <vsnprintf>:
 930:	ae e0       	ldi	r26, 0x0E	; 14
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	ed e9       	ldi	r30, 0x9D	; 157
 936:	f4 e0       	ldi	r31, 0x04	; 4
 938:	b4 c2       	rjmp	.+1384   	; 0xea2 <__prologue_saves__+0x1c>
 93a:	8c 01       	movw	r16, r24
 93c:	fa 01       	movw	r30, r20
 93e:	86 e0       	ldi	r24, 0x06	; 6
 940:	8c 83       	std	Y+4, r24	; 0x04
 942:	1a 83       	std	Y+2, r17	; 0x02
 944:	09 83       	std	Y+1, r16	; 0x01
 946:	77 ff       	sbrs	r23, 7
 948:	02 c0       	rjmp	.+4      	; 0x94e <vsnprintf+0x1e>
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	70 e8       	ldi	r23, 0x80	; 128
 94e:	cb 01       	movw	r24, r22
 950:	01 97       	sbiw	r24, 0x01	; 1
 952:	9e 83       	std	Y+6, r25	; 0x06
 954:	8d 83       	std	Y+5, r24	; 0x05
 956:	a9 01       	movw	r20, r18
 958:	bf 01       	movw	r22, r30
 95a:	ce 01       	movw	r24, r28
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	11 d0       	rcall	.+34     	; 0x982 <vfprintf>
 960:	4d 81       	ldd	r20, Y+5	; 0x05
 962:	5e 81       	ldd	r21, Y+6	; 0x06
 964:	57 fd       	sbrc	r21, 7
 966:	0a c0       	rjmp	.+20     	; 0x97c <vsnprintf+0x4c>
 968:	2f 81       	ldd	r18, Y+7	; 0x07
 96a:	38 85       	ldd	r19, Y+8	; 0x08
 96c:	42 17       	cp	r20, r18
 96e:	53 07       	cpc	r21, r19
 970:	0c f4       	brge	.+2      	; 0x974 <vsnprintf+0x44>
 972:	9a 01       	movw	r18, r20
 974:	f8 01       	movw	r30, r16
 976:	e2 0f       	add	r30, r18
 978:	f3 1f       	adc	r31, r19
 97a:	10 82       	st	Z, r1
 97c:	2e 96       	adiw	r28, 0x0e	; 14
 97e:	e4 e0       	ldi	r30, 0x04	; 4
 980:	ac c2       	rjmp	.+1368   	; 0xeda <__epilogue_restores__+0x1c>

00000982 <vfprintf>:
 982:	ab e0       	ldi	r26, 0x0B	; 11
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	e6 ec       	ldi	r30, 0xC6	; 198
 988:	f4 e0       	ldi	r31, 0x04	; 4
 98a:	7d c2       	rjmp	.+1274   	; 0xe86 <__prologue_saves__>
 98c:	6c 01       	movw	r12, r24
 98e:	7b 01       	movw	r14, r22
 990:	8a 01       	movw	r16, r20
 992:	fc 01       	movw	r30, r24
 994:	17 82       	std	Z+7, r1	; 0x07
 996:	16 82       	std	Z+6, r1	; 0x06
 998:	83 81       	ldd	r24, Z+3	; 0x03
 99a:	81 ff       	sbrs	r24, 1
 99c:	bf c1       	rjmp	.+894    	; 0xd1c <vfprintf+0x39a>
 99e:	ce 01       	movw	r24, r28
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	3c 01       	movw	r6, r24
 9a4:	f6 01       	movw	r30, r12
 9a6:	93 81       	ldd	r25, Z+3	; 0x03
 9a8:	f7 01       	movw	r30, r14
 9aa:	93 fd       	sbrc	r25, 3
 9ac:	85 91       	lpm	r24, Z+
 9ae:	93 ff       	sbrs	r25, 3
 9b0:	81 91       	ld	r24, Z+
 9b2:	7f 01       	movw	r14, r30
 9b4:	88 23       	and	r24, r24
 9b6:	09 f4       	brne	.+2      	; 0x9ba <vfprintf+0x38>
 9b8:	ad c1       	rjmp	.+858    	; 0xd14 <vfprintf+0x392>
 9ba:	85 32       	cpi	r24, 0x25	; 37
 9bc:	39 f4       	brne	.+14     	; 0x9cc <vfprintf+0x4a>
 9be:	93 fd       	sbrc	r25, 3
 9c0:	85 91       	lpm	r24, Z+
 9c2:	93 ff       	sbrs	r25, 3
 9c4:	81 91       	ld	r24, Z+
 9c6:	7f 01       	movw	r14, r30
 9c8:	85 32       	cpi	r24, 0x25	; 37
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <vfprintf+0x52>
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	c0 d1       	rcall	.+896    	; 0xd52 <fputc>
 9d2:	e8 cf       	rjmp	.-48     	; 0x9a4 <vfprintf+0x22>
 9d4:	91 2c       	mov	r9, r1
 9d6:	21 2c       	mov	r2, r1
 9d8:	31 2c       	mov	r3, r1
 9da:	ff e1       	ldi	r31, 0x1F	; 31
 9dc:	f3 15       	cp	r31, r3
 9de:	d8 f0       	brcs	.+54     	; 0xa16 <vfprintf+0x94>
 9e0:	8b 32       	cpi	r24, 0x2B	; 43
 9e2:	79 f0       	breq	.+30     	; 0xa02 <vfprintf+0x80>
 9e4:	38 f4       	brcc	.+14     	; 0x9f4 <vfprintf+0x72>
 9e6:	80 32       	cpi	r24, 0x20	; 32
 9e8:	79 f0       	breq	.+30     	; 0xa08 <vfprintf+0x86>
 9ea:	83 32       	cpi	r24, 0x23	; 35
 9ec:	a1 f4       	brne	.+40     	; 0xa16 <vfprintf+0x94>
 9ee:	23 2d       	mov	r18, r3
 9f0:	20 61       	ori	r18, 0x10	; 16
 9f2:	1d c0       	rjmp	.+58     	; 0xa2e <vfprintf+0xac>
 9f4:	8d 32       	cpi	r24, 0x2D	; 45
 9f6:	61 f0       	breq	.+24     	; 0xa10 <vfprintf+0x8e>
 9f8:	80 33       	cpi	r24, 0x30	; 48
 9fa:	69 f4       	brne	.+26     	; 0xa16 <vfprintf+0x94>
 9fc:	23 2d       	mov	r18, r3
 9fe:	21 60       	ori	r18, 0x01	; 1
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <vfprintf+0xac>
 a02:	83 2d       	mov	r24, r3
 a04:	82 60       	ori	r24, 0x02	; 2
 a06:	38 2e       	mov	r3, r24
 a08:	e3 2d       	mov	r30, r3
 a0a:	e4 60       	ori	r30, 0x04	; 4
 a0c:	3e 2e       	mov	r3, r30
 a0e:	2a c0       	rjmp	.+84     	; 0xa64 <vfprintf+0xe2>
 a10:	f3 2d       	mov	r31, r3
 a12:	f8 60       	ori	r31, 0x08	; 8
 a14:	1d c0       	rjmp	.+58     	; 0xa50 <vfprintf+0xce>
 a16:	37 fc       	sbrc	r3, 7
 a18:	2d c0       	rjmp	.+90     	; 0xa74 <vfprintf+0xf2>
 a1a:	20 ed       	ldi	r18, 0xD0	; 208
 a1c:	28 0f       	add	r18, r24
 a1e:	2a 30       	cpi	r18, 0x0A	; 10
 a20:	40 f0       	brcs	.+16     	; 0xa32 <vfprintf+0xb0>
 a22:	8e 32       	cpi	r24, 0x2E	; 46
 a24:	b9 f4       	brne	.+46     	; 0xa54 <vfprintf+0xd2>
 a26:	36 fc       	sbrc	r3, 6
 a28:	75 c1       	rjmp	.+746    	; 0xd14 <vfprintf+0x392>
 a2a:	23 2d       	mov	r18, r3
 a2c:	20 64       	ori	r18, 0x40	; 64
 a2e:	32 2e       	mov	r3, r18
 a30:	19 c0       	rjmp	.+50     	; 0xa64 <vfprintf+0xe2>
 a32:	36 fe       	sbrs	r3, 6
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <vfprintf+0xc0>
 a36:	8a e0       	ldi	r24, 0x0A	; 10
 a38:	98 9e       	mul	r9, r24
 a3a:	20 0d       	add	r18, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	92 2e       	mov	r9, r18
 a40:	11 c0       	rjmp	.+34     	; 0xa64 <vfprintf+0xe2>
 a42:	ea e0       	ldi	r30, 0x0A	; 10
 a44:	2e 9e       	mul	r2, r30
 a46:	20 0d       	add	r18, r0
 a48:	11 24       	eor	r1, r1
 a4a:	22 2e       	mov	r2, r18
 a4c:	f3 2d       	mov	r31, r3
 a4e:	f0 62       	ori	r31, 0x20	; 32
 a50:	3f 2e       	mov	r3, r31
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <vfprintf+0xe2>
 a54:	8c 36       	cpi	r24, 0x6C	; 108
 a56:	21 f4       	brne	.+8      	; 0xa60 <vfprintf+0xde>
 a58:	83 2d       	mov	r24, r3
 a5a:	80 68       	ori	r24, 0x80	; 128
 a5c:	38 2e       	mov	r3, r24
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <vfprintf+0xe2>
 a60:	88 36       	cpi	r24, 0x68	; 104
 a62:	41 f4       	brne	.+16     	; 0xa74 <vfprintf+0xf2>
 a64:	f7 01       	movw	r30, r14
 a66:	93 fd       	sbrc	r25, 3
 a68:	85 91       	lpm	r24, Z+
 a6a:	93 ff       	sbrs	r25, 3
 a6c:	81 91       	ld	r24, Z+
 a6e:	7f 01       	movw	r14, r30
 a70:	81 11       	cpse	r24, r1
 a72:	b3 cf       	rjmp	.-154    	; 0x9da <vfprintf+0x58>
 a74:	98 2f       	mov	r25, r24
 a76:	9f 7d       	andi	r25, 0xDF	; 223
 a78:	95 54       	subi	r25, 0x45	; 69
 a7a:	93 30       	cpi	r25, 0x03	; 3
 a7c:	28 f4       	brcc	.+10     	; 0xa88 <vfprintf+0x106>
 a7e:	0c 5f       	subi	r16, 0xFC	; 252
 a80:	1f 4f       	sbci	r17, 0xFF	; 255
 a82:	9f e3       	ldi	r25, 0x3F	; 63
 a84:	99 83       	std	Y+1, r25	; 0x01
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <vfprintf+0x120>
 a88:	83 36       	cpi	r24, 0x63	; 99
 a8a:	31 f0       	breq	.+12     	; 0xa98 <vfprintf+0x116>
 a8c:	83 37       	cpi	r24, 0x73	; 115
 a8e:	71 f0       	breq	.+28     	; 0xaac <vfprintf+0x12a>
 a90:	83 35       	cpi	r24, 0x53	; 83
 a92:	09 f0       	breq	.+2      	; 0xa96 <vfprintf+0x114>
 a94:	55 c0       	rjmp	.+170    	; 0xb40 <vfprintf+0x1be>
 a96:	20 c0       	rjmp	.+64     	; 0xad8 <vfprintf+0x156>
 a98:	f8 01       	movw	r30, r16
 a9a:	80 81       	ld	r24, Z
 a9c:	89 83       	std	Y+1, r24	; 0x01
 a9e:	0e 5f       	subi	r16, 0xFE	; 254
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	88 24       	eor	r8, r8
 aa4:	83 94       	inc	r8
 aa6:	91 2c       	mov	r9, r1
 aa8:	53 01       	movw	r10, r6
 aaa:	12 c0       	rjmp	.+36     	; 0xad0 <vfprintf+0x14e>
 aac:	28 01       	movw	r4, r16
 aae:	f2 e0       	ldi	r31, 0x02	; 2
 ab0:	4f 0e       	add	r4, r31
 ab2:	51 1c       	adc	r5, r1
 ab4:	f8 01       	movw	r30, r16
 ab6:	a0 80       	ld	r10, Z
 ab8:	b1 80       	ldd	r11, Z+1	; 0x01
 aba:	36 fe       	sbrs	r3, 6
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <vfprintf+0x142>
 abe:	69 2d       	mov	r22, r9
 ac0:	70 e0       	ldi	r23, 0x00	; 0
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <vfprintf+0x146>
 ac4:	6f ef       	ldi	r22, 0xFF	; 255
 ac6:	7f ef       	ldi	r23, 0xFF	; 255
 ac8:	c5 01       	movw	r24, r10
 aca:	38 d1       	rcall	.+624    	; 0xd3c <strnlen>
 acc:	4c 01       	movw	r8, r24
 ace:	82 01       	movw	r16, r4
 ad0:	f3 2d       	mov	r31, r3
 ad2:	ff 77       	andi	r31, 0x7F	; 127
 ad4:	3f 2e       	mov	r3, r31
 ad6:	15 c0       	rjmp	.+42     	; 0xb02 <vfprintf+0x180>
 ad8:	28 01       	movw	r4, r16
 ada:	22 e0       	ldi	r18, 0x02	; 2
 adc:	42 0e       	add	r4, r18
 ade:	51 1c       	adc	r5, r1
 ae0:	f8 01       	movw	r30, r16
 ae2:	a0 80       	ld	r10, Z
 ae4:	b1 80       	ldd	r11, Z+1	; 0x01
 ae6:	36 fe       	sbrs	r3, 6
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <vfprintf+0x16e>
 aea:	69 2d       	mov	r22, r9
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x172>
 af0:	6f ef       	ldi	r22, 0xFF	; 255
 af2:	7f ef       	ldi	r23, 0xFF	; 255
 af4:	c5 01       	movw	r24, r10
 af6:	17 d1       	rcall	.+558    	; 0xd26 <strnlen_P>
 af8:	4c 01       	movw	r8, r24
 afa:	f3 2d       	mov	r31, r3
 afc:	f0 68       	ori	r31, 0x80	; 128
 afe:	3f 2e       	mov	r3, r31
 b00:	82 01       	movw	r16, r4
 b02:	33 fc       	sbrc	r3, 3
 b04:	19 c0       	rjmp	.+50     	; 0xb38 <vfprintf+0x1b6>
 b06:	82 2d       	mov	r24, r2
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	88 16       	cp	r8, r24
 b0c:	99 06       	cpc	r9, r25
 b0e:	a0 f4       	brcc	.+40     	; 0xb38 <vfprintf+0x1b6>
 b10:	b6 01       	movw	r22, r12
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	1d d1       	rcall	.+570    	; 0xd52 <fputc>
 b18:	2a 94       	dec	r2
 b1a:	f5 cf       	rjmp	.-22     	; 0xb06 <vfprintf+0x184>
 b1c:	f5 01       	movw	r30, r10
 b1e:	37 fc       	sbrc	r3, 7
 b20:	85 91       	lpm	r24, Z+
 b22:	37 fe       	sbrs	r3, 7
 b24:	81 91       	ld	r24, Z+
 b26:	5f 01       	movw	r10, r30
 b28:	b6 01       	movw	r22, r12
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	12 d1       	rcall	.+548    	; 0xd52 <fputc>
 b2e:	21 10       	cpse	r2, r1
 b30:	2a 94       	dec	r2
 b32:	21 e0       	ldi	r18, 0x01	; 1
 b34:	82 1a       	sub	r8, r18
 b36:	91 08       	sbc	r9, r1
 b38:	81 14       	cp	r8, r1
 b3a:	91 04       	cpc	r9, r1
 b3c:	79 f7       	brne	.-34     	; 0xb1c <vfprintf+0x19a>
 b3e:	e1 c0       	rjmp	.+450    	; 0xd02 <vfprintf+0x380>
 b40:	84 36       	cpi	r24, 0x64	; 100
 b42:	11 f0       	breq	.+4      	; 0xb48 <vfprintf+0x1c6>
 b44:	89 36       	cpi	r24, 0x69	; 105
 b46:	39 f5       	brne	.+78     	; 0xb96 <vfprintf+0x214>
 b48:	f8 01       	movw	r30, r16
 b4a:	37 fe       	sbrs	r3, 7
 b4c:	07 c0       	rjmp	.+14     	; 0xb5c <vfprintf+0x1da>
 b4e:	60 81       	ld	r22, Z
 b50:	71 81       	ldd	r23, Z+1	; 0x01
 b52:	82 81       	ldd	r24, Z+2	; 0x02
 b54:	93 81       	ldd	r25, Z+3	; 0x03
 b56:	0c 5f       	subi	r16, 0xFC	; 252
 b58:	1f 4f       	sbci	r17, 0xFF	; 255
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <vfprintf+0x1ea>
 b5c:	60 81       	ld	r22, Z
 b5e:	71 81       	ldd	r23, Z+1	; 0x01
 b60:	07 2e       	mov	r0, r23
 b62:	00 0c       	add	r0, r0
 b64:	88 0b       	sbc	r24, r24
 b66:	99 0b       	sbc	r25, r25
 b68:	0e 5f       	subi	r16, 0xFE	; 254
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	f3 2d       	mov	r31, r3
 b6e:	ff 76       	andi	r31, 0x6F	; 111
 b70:	3f 2e       	mov	r3, r31
 b72:	97 ff       	sbrs	r25, 7
 b74:	09 c0       	rjmp	.+18     	; 0xb88 <vfprintf+0x206>
 b76:	90 95       	com	r25
 b78:	80 95       	com	r24
 b7a:	70 95       	com	r23
 b7c:	61 95       	neg	r22
 b7e:	7f 4f       	sbci	r23, 0xFF	; 255
 b80:	8f 4f       	sbci	r24, 0xFF	; 255
 b82:	9f 4f       	sbci	r25, 0xFF	; 255
 b84:	f0 68       	ori	r31, 0x80	; 128
 b86:	3f 2e       	mov	r3, r31
 b88:	2a e0       	ldi	r18, 0x0A	; 10
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	a3 01       	movw	r20, r6
 b8e:	1d d1       	rcall	.+570    	; 0xdca <__ultoa_invert>
 b90:	88 2e       	mov	r8, r24
 b92:	86 18       	sub	r8, r6
 b94:	44 c0       	rjmp	.+136    	; 0xc1e <vfprintf+0x29c>
 b96:	85 37       	cpi	r24, 0x75	; 117
 b98:	31 f4       	brne	.+12     	; 0xba6 <vfprintf+0x224>
 b9a:	23 2d       	mov	r18, r3
 b9c:	2f 7e       	andi	r18, 0xEF	; 239
 b9e:	b2 2e       	mov	r11, r18
 ba0:	2a e0       	ldi	r18, 0x0A	; 10
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	25 c0       	rjmp	.+74     	; 0xbf0 <vfprintf+0x26e>
 ba6:	93 2d       	mov	r25, r3
 ba8:	99 7f       	andi	r25, 0xF9	; 249
 baa:	b9 2e       	mov	r11, r25
 bac:	8f 36       	cpi	r24, 0x6F	; 111
 bae:	c1 f0       	breq	.+48     	; 0xbe0 <vfprintf+0x25e>
 bb0:	18 f4       	brcc	.+6      	; 0xbb8 <vfprintf+0x236>
 bb2:	88 35       	cpi	r24, 0x58	; 88
 bb4:	79 f0       	breq	.+30     	; 0xbd4 <vfprintf+0x252>
 bb6:	ae c0       	rjmp	.+348    	; 0xd14 <vfprintf+0x392>
 bb8:	80 37       	cpi	r24, 0x70	; 112
 bba:	19 f0       	breq	.+6      	; 0xbc2 <vfprintf+0x240>
 bbc:	88 37       	cpi	r24, 0x78	; 120
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <vfprintf+0x246>
 bc0:	a9 c0       	rjmp	.+338    	; 0xd14 <vfprintf+0x392>
 bc2:	e9 2f       	mov	r30, r25
 bc4:	e0 61       	ori	r30, 0x10	; 16
 bc6:	be 2e       	mov	r11, r30
 bc8:	b4 fe       	sbrs	r11, 4
 bca:	0d c0       	rjmp	.+26     	; 0xbe6 <vfprintf+0x264>
 bcc:	fb 2d       	mov	r31, r11
 bce:	f4 60       	ori	r31, 0x04	; 4
 bd0:	bf 2e       	mov	r11, r31
 bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <vfprintf+0x264>
 bd4:	34 fe       	sbrs	r3, 4
 bd6:	0a c0       	rjmp	.+20     	; 0xbec <vfprintf+0x26a>
 bd8:	29 2f       	mov	r18, r25
 bda:	26 60       	ori	r18, 0x06	; 6
 bdc:	b2 2e       	mov	r11, r18
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x26a>
 be0:	28 e0       	ldi	r18, 0x08	; 8
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	05 c0       	rjmp	.+10     	; 0xbf0 <vfprintf+0x26e>
 be6:	20 e1       	ldi	r18, 0x10	; 16
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0x26e>
 bec:	20 e1       	ldi	r18, 0x10	; 16
 bee:	32 e0       	ldi	r19, 0x02	; 2
 bf0:	f8 01       	movw	r30, r16
 bf2:	b7 fe       	sbrs	r11, 7
 bf4:	07 c0       	rjmp	.+14     	; 0xc04 <vfprintf+0x282>
 bf6:	60 81       	ld	r22, Z
 bf8:	71 81       	ldd	r23, Z+1	; 0x01
 bfa:	82 81       	ldd	r24, Z+2	; 0x02
 bfc:	93 81       	ldd	r25, Z+3	; 0x03
 bfe:	0c 5f       	subi	r16, 0xFC	; 252
 c00:	1f 4f       	sbci	r17, 0xFF	; 255
 c02:	06 c0       	rjmp	.+12     	; 0xc10 <vfprintf+0x28e>
 c04:	60 81       	ld	r22, Z
 c06:	71 81       	ldd	r23, Z+1	; 0x01
 c08:	80 e0       	ldi	r24, 0x00	; 0
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 5f       	subi	r16, 0xFE	; 254
 c0e:	1f 4f       	sbci	r17, 0xFF	; 255
 c10:	a3 01       	movw	r20, r6
 c12:	db d0       	rcall	.+438    	; 0xdca <__ultoa_invert>
 c14:	88 2e       	mov	r8, r24
 c16:	86 18       	sub	r8, r6
 c18:	fb 2d       	mov	r31, r11
 c1a:	ff 77       	andi	r31, 0x7F	; 127
 c1c:	3f 2e       	mov	r3, r31
 c1e:	36 fe       	sbrs	r3, 6
 c20:	0d c0       	rjmp	.+26     	; 0xc3c <vfprintf+0x2ba>
 c22:	23 2d       	mov	r18, r3
 c24:	2e 7f       	andi	r18, 0xFE	; 254
 c26:	a2 2e       	mov	r10, r18
 c28:	89 14       	cp	r8, r9
 c2a:	58 f4       	brcc	.+22     	; 0xc42 <vfprintf+0x2c0>
 c2c:	34 fe       	sbrs	r3, 4
 c2e:	0b c0       	rjmp	.+22     	; 0xc46 <vfprintf+0x2c4>
 c30:	32 fc       	sbrc	r3, 2
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <vfprintf+0x2c4>
 c34:	83 2d       	mov	r24, r3
 c36:	8e 7e       	andi	r24, 0xEE	; 238
 c38:	a8 2e       	mov	r10, r24
 c3a:	05 c0       	rjmp	.+10     	; 0xc46 <vfprintf+0x2c4>
 c3c:	b8 2c       	mov	r11, r8
 c3e:	a3 2c       	mov	r10, r3
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <vfprintf+0x2c6>
 c42:	b8 2c       	mov	r11, r8
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x2c6>
 c46:	b9 2c       	mov	r11, r9
 c48:	a4 fe       	sbrs	r10, 4
 c4a:	0f c0       	rjmp	.+30     	; 0xc6a <vfprintf+0x2e8>
 c4c:	fe 01       	movw	r30, r28
 c4e:	e8 0d       	add	r30, r8
 c50:	f1 1d       	adc	r31, r1
 c52:	80 81       	ld	r24, Z
 c54:	80 33       	cpi	r24, 0x30	; 48
 c56:	21 f4       	brne	.+8      	; 0xc60 <vfprintf+0x2de>
 c58:	9a 2d       	mov	r25, r10
 c5a:	99 7e       	andi	r25, 0xE9	; 233
 c5c:	a9 2e       	mov	r10, r25
 c5e:	09 c0       	rjmp	.+18     	; 0xc72 <vfprintf+0x2f0>
 c60:	a2 fe       	sbrs	r10, 2
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <vfprintf+0x2ee>
 c64:	b3 94       	inc	r11
 c66:	b3 94       	inc	r11
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <vfprintf+0x2f0>
 c6a:	8a 2d       	mov	r24, r10
 c6c:	86 78       	andi	r24, 0x86	; 134
 c6e:	09 f0       	breq	.+2      	; 0xc72 <vfprintf+0x2f0>
 c70:	b3 94       	inc	r11
 c72:	a3 fc       	sbrc	r10, 3
 c74:	10 c0       	rjmp	.+32     	; 0xc96 <vfprintf+0x314>
 c76:	a0 fe       	sbrs	r10, 0
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x304>
 c7a:	b2 14       	cp	r11, r2
 c7c:	80 f4       	brcc	.+32     	; 0xc9e <vfprintf+0x31c>
 c7e:	28 0c       	add	r2, r8
 c80:	92 2c       	mov	r9, r2
 c82:	9b 18       	sub	r9, r11
 c84:	0d c0       	rjmp	.+26     	; 0xca0 <vfprintf+0x31e>
 c86:	b2 14       	cp	r11, r2
 c88:	58 f4       	brcc	.+22     	; 0xca0 <vfprintf+0x31e>
 c8a:	b6 01       	movw	r22, r12
 c8c:	80 e2       	ldi	r24, 0x20	; 32
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	60 d0       	rcall	.+192    	; 0xd52 <fputc>
 c92:	b3 94       	inc	r11
 c94:	f8 cf       	rjmp	.-16     	; 0xc86 <vfprintf+0x304>
 c96:	b2 14       	cp	r11, r2
 c98:	18 f4       	brcc	.+6      	; 0xca0 <vfprintf+0x31e>
 c9a:	2b 18       	sub	r2, r11
 c9c:	02 c0       	rjmp	.+4      	; 0xca2 <vfprintf+0x320>
 c9e:	98 2c       	mov	r9, r8
 ca0:	21 2c       	mov	r2, r1
 ca2:	a4 fe       	sbrs	r10, 4
 ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <vfprintf+0x342>
 ca6:	b6 01       	movw	r22, r12
 ca8:	80 e3       	ldi	r24, 0x30	; 48
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	52 d0       	rcall	.+164    	; 0xd52 <fputc>
 cae:	a2 fe       	sbrs	r10, 2
 cb0:	16 c0       	rjmp	.+44     	; 0xcde <vfprintf+0x35c>
 cb2:	a1 fc       	sbrc	r10, 1
 cb4:	03 c0       	rjmp	.+6      	; 0xcbc <vfprintf+0x33a>
 cb6:	88 e7       	ldi	r24, 0x78	; 120
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x33e>
 cbc:	88 e5       	ldi	r24, 0x58	; 88
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	b6 01       	movw	r22, r12
 cc2:	0c c0       	rjmp	.+24     	; 0xcdc <vfprintf+0x35a>
 cc4:	8a 2d       	mov	r24, r10
 cc6:	86 78       	andi	r24, 0x86	; 134
 cc8:	51 f0       	breq	.+20     	; 0xcde <vfprintf+0x35c>
 cca:	a1 fe       	sbrs	r10, 1
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x350>
 cce:	8b e2       	ldi	r24, 0x2B	; 43
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <vfprintf+0x352>
 cd2:	80 e2       	ldi	r24, 0x20	; 32
 cd4:	a7 fc       	sbrc	r10, 7
 cd6:	8d e2       	ldi	r24, 0x2D	; 45
 cd8:	b6 01       	movw	r22, r12
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	3a d0       	rcall	.+116    	; 0xd52 <fputc>
 cde:	89 14       	cp	r8, r9
 ce0:	30 f4       	brcc	.+12     	; 0xcee <vfprintf+0x36c>
 ce2:	b6 01       	movw	r22, r12
 ce4:	80 e3       	ldi	r24, 0x30	; 48
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	34 d0       	rcall	.+104    	; 0xd52 <fputc>
 cea:	9a 94       	dec	r9
 cec:	f8 cf       	rjmp	.-16     	; 0xcde <vfprintf+0x35c>
 cee:	8a 94       	dec	r8
 cf0:	f3 01       	movw	r30, r6
 cf2:	e8 0d       	add	r30, r8
 cf4:	f1 1d       	adc	r31, r1
 cf6:	80 81       	ld	r24, Z
 cf8:	b6 01       	movw	r22, r12
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	2a d0       	rcall	.+84     	; 0xd52 <fputc>
 cfe:	81 10       	cpse	r8, r1
 d00:	f6 cf       	rjmp	.-20     	; 0xcee <vfprintf+0x36c>
 d02:	22 20       	and	r2, r2
 d04:	09 f4       	brne	.+2      	; 0xd08 <vfprintf+0x386>
 d06:	4e ce       	rjmp	.-868    	; 0x9a4 <vfprintf+0x22>
 d08:	b6 01       	movw	r22, r12
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	21 d0       	rcall	.+66     	; 0xd52 <fputc>
 d10:	2a 94       	dec	r2
 d12:	f7 cf       	rjmp	.-18     	; 0xd02 <vfprintf+0x380>
 d14:	f6 01       	movw	r30, r12
 d16:	86 81       	ldd	r24, Z+6	; 0x06
 d18:	97 81       	ldd	r25, Z+7	; 0x07
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x39e>
 d1c:	8f ef       	ldi	r24, 0xFF	; 255
 d1e:	9f ef       	ldi	r25, 0xFF	; 255
 d20:	2b 96       	adiw	r28, 0x0b	; 11
 d22:	e2 e1       	ldi	r30, 0x12	; 18
 d24:	cc c0       	rjmp	.+408    	; 0xebe <__epilogue_restores__>

00000d26 <strnlen_P>:
 d26:	fc 01       	movw	r30, r24
 d28:	05 90       	lpm	r0, Z+
 d2a:	61 50       	subi	r22, 0x01	; 1
 d2c:	70 40       	sbci	r23, 0x00	; 0
 d2e:	01 10       	cpse	r0, r1
 d30:	d8 f7       	brcc	.-10     	; 0xd28 <strnlen_P+0x2>
 d32:	80 95       	com	r24
 d34:	90 95       	com	r25
 d36:	8e 0f       	add	r24, r30
 d38:	9f 1f       	adc	r25, r31
 d3a:	08 95       	ret

00000d3c <strnlen>:
 d3c:	fc 01       	movw	r30, r24
 d3e:	61 50       	subi	r22, 0x01	; 1
 d40:	70 40       	sbci	r23, 0x00	; 0
 d42:	01 90       	ld	r0, Z+
 d44:	01 10       	cpse	r0, r1
 d46:	d8 f7       	brcc	.-10     	; 0xd3e <strnlen+0x2>
 d48:	80 95       	com	r24
 d4a:	90 95       	com	r25
 d4c:	8e 0f       	add	r24, r30
 d4e:	9f 1f       	adc	r25, r31
 d50:	08 95       	ret

00000d52 <fputc>:
 d52:	0f 93       	push	r16
 d54:	1f 93       	push	r17
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	fb 01       	movw	r30, r22
 d5c:	23 81       	ldd	r18, Z+3	; 0x03
 d5e:	21 fd       	sbrc	r18, 1
 d60:	03 c0       	rjmp	.+6      	; 0xd68 <fputc+0x16>
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	9f ef       	ldi	r25, 0xFF	; 255
 d66:	2c c0       	rjmp	.+88     	; 0xdc0 <fputc+0x6e>
 d68:	22 ff       	sbrs	r18, 2
 d6a:	16 c0       	rjmp	.+44     	; 0xd98 <fputc+0x46>
 d6c:	46 81       	ldd	r20, Z+6	; 0x06
 d6e:	57 81       	ldd	r21, Z+7	; 0x07
 d70:	24 81       	ldd	r18, Z+4	; 0x04
 d72:	35 81       	ldd	r19, Z+5	; 0x05
 d74:	42 17       	cp	r20, r18
 d76:	53 07       	cpc	r21, r19
 d78:	44 f4       	brge	.+16     	; 0xd8a <fputc+0x38>
 d7a:	a0 81       	ld	r26, Z
 d7c:	b1 81       	ldd	r27, Z+1	; 0x01
 d7e:	9d 01       	movw	r18, r26
 d80:	2f 5f       	subi	r18, 0xFF	; 255
 d82:	3f 4f       	sbci	r19, 0xFF	; 255
 d84:	31 83       	std	Z+1, r19	; 0x01
 d86:	20 83       	st	Z, r18
 d88:	8c 93       	st	X, r24
 d8a:	26 81       	ldd	r18, Z+6	; 0x06
 d8c:	37 81       	ldd	r19, Z+7	; 0x07
 d8e:	2f 5f       	subi	r18, 0xFF	; 255
 d90:	3f 4f       	sbci	r19, 0xFF	; 255
 d92:	37 83       	std	Z+7, r19	; 0x07
 d94:	26 83       	std	Z+6, r18	; 0x06
 d96:	14 c0       	rjmp	.+40     	; 0xdc0 <fputc+0x6e>
 d98:	8b 01       	movw	r16, r22
 d9a:	ec 01       	movw	r28, r24
 d9c:	fb 01       	movw	r30, r22
 d9e:	00 84       	ldd	r0, Z+8	; 0x08
 da0:	f1 85       	ldd	r31, Z+9	; 0x09
 da2:	e0 2d       	mov	r30, r0
 da4:	09 95       	icall
 da6:	89 2b       	or	r24, r25
 da8:	e1 f6       	brne	.-72     	; 0xd62 <fputc+0x10>
 daa:	d8 01       	movw	r26, r16
 dac:	16 96       	adiw	r26, 0x06	; 6
 dae:	8d 91       	ld	r24, X+
 db0:	9c 91       	ld	r25, X
 db2:	17 97       	sbiw	r26, 0x07	; 7
 db4:	01 96       	adiw	r24, 0x01	; 1
 db6:	17 96       	adiw	r26, 0x07	; 7
 db8:	9c 93       	st	X, r25
 dba:	8e 93       	st	-X, r24
 dbc:	16 97       	sbiw	r26, 0x06	; 6
 dbe:	ce 01       	movw	r24, r28
 dc0:	df 91       	pop	r29
 dc2:	cf 91       	pop	r28
 dc4:	1f 91       	pop	r17
 dc6:	0f 91       	pop	r16
 dc8:	08 95       	ret

00000dca <__ultoa_invert>:
 dca:	fa 01       	movw	r30, r20
 dcc:	aa 27       	eor	r26, r26
 dce:	28 30       	cpi	r18, 0x08	; 8
 dd0:	51 f1       	breq	.+84     	; 0xe26 <__ultoa_invert+0x5c>
 dd2:	20 31       	cpi	r18, 0x10	; 16
 dd4:	81 f1       	breq	.+96     	; 0xe36 <__ultoa_invert+0x6c>
 dd6:	e8 94       	clt
 dd8:	6f 93       	push	r22
 dda:	6e 7f       	andi	r22, 0xFE	; 254
 ddc:	6e 5f       	subi	r22, 0xFE	; 254
 dde:	7f 4f       	sbci	r23, 0xFF	; 255
 de0:	8f 4f       	sbci	r24, 0xFF	; 255
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	af 4f       	sbci	r26, 0xFF	; 255
 de6:	b1 e0       	ldi	r27, 0x01	; 1
 de8:	3e d0       	rcall	.+124    	; 0xe66 <__ultoa_invert+0x9c>
 dea:	b4 e0       	ldi	r27, 0x04	; 4
 dec:	3c d0       	rcall	.+120    	; 0xe66 <__ultoa_invert+0x9c>
 dee:	67 0f       	add	r22, r23
 df0:	78 1f       	adc	r23, r24
 df2:	89 1f       	adc	r24, r25
 df4:	9a 1f       	adc	r25, r26
 df6:	a1 1d       	adc	r26, r1
 df8:	68 0f       	add	r22, r24
 dfa:	79 1f       	adc	r23, r25
 dfc:	8a 1f       	adc	r24, r26
 dfe:	91 1d       	adc	r25, r1
 e00:	a1 1d       	adc	r26, r1
 e02:	6a 0f       	add	r22, r26
 e04:	71 1d       	adc	r23, r1
 e06:	81 1d       	adc	r24, r1
 e08:	91 1d       	adc	r25, r1
 e0a:	a1 1d       	adc	r26, r1
 e0c:	20 d0       	rcall	.+64     	; 0xe4e <__ultoa_invert+0x84>
 e0e:	09 f4       	brne	.+2      	; 0xe12 <__ultoa_invert+0x48>
 e10:	68 94       	set
 e12:	3f 91       	pop	r19
 e14:	2a e0       	ldi	r18, 0x0A	; 10
 e16:	26 9f       	mul	r18, r22
 e18:	11 24       	eor	r1, r1
 e1a:	30 19       	sub	r19, r0
 e1c:	30 5d       	subi	r19, 0xD0	; 208
 e1e:	31 93       	st	Z+, r19
 e20:	de f6       	brtc	.-74     	; 0xdd8 <__ultoa_invert+0xe>
 e22:	cf 01       	movw	r24, r30
 e24:	08 95       	ret
 e26:	46 2f       	mov	r20, r22
 e28:	47 70       	andi	r20, 0x07	; 7
 e2a:	40 5d       	subi	r20, 0xD0	; 208
 e2c:	41 93       	st	Z+, r20
 e2e:	b3 e0       	ldi	r27, 0x03	; 3
 e30:	0f d0       	rcall	.+30     	; 0xe50 <__ultoa_invert+0x86>
 e32:	c9 f7       	brne	.-14     	; 0xe26 <__ultoa_invert+0x5c>
 e34:	f6 cf       	rjmp	.-20     	; 0xe22 <__ultoa_invert+0x58>
 e36:	46 2f       	mov	r20, r22
 e38:	4f 70       	andi	r20, 0x0F	; 15
 e3a:	40 5d       	subi	r20, 0xD0	; 208
 e3c:	4a 33       	cpi	r20, 0x3A	; 58
 e3e:	18 f0       	brcs	.+6      	; 0xe46 <__ultoa_invert+0x7c>
 e40:	49 5d       	subi	r20, 0xD9	; 217
 e42:	31 fd       	sbrc	r19, 1
 e44:	40 52       	subi	r20, 0x20	; 32
 e46:	41 93       	st	Z+, r20
 e48:	02 d0       	rcall	.+4      	; 0xe4e <__ultoa_invert+0x84>
 e4a:	a9 f7       	brne	.-22     	; 0xe36 <__ultoa_invert+0x6c>
 e4c:	ea cf       	rjmp	.-44     	; 0xe22 <__ultoa_invert+0x58>
 e4e:	b4 e0       	ldi	r27, 0x04	; 4
 e50:	a6 95       	lsr	r26
 e52:	97 95       	ror	r25
 e54:	87 95       	ror	r24
 e56:	77 95       	ror	r23
 e58:	67 95       	ror	r22
 e5a:	ba 95       	dec	r27
 e5c:	c9 f7       	brne	.-14     	; 0xe50 <__ultoa_invert+0x86>
 e5e:	00 97       	sbiw	r24, 0x00	; 0
 e60:	61 05       	cpc	r22, r1
 e62:	71 05       	cpc	r23, r1
 e64:	08 95       	ret
 e66:	9b 01       	movw	r18, r22
 e68:	ac 01       	movw	r20, r24
 e6a:	0a 2e       	mov	r0, r26
 e6c:	06 94       	lsr	r0
 e6e:	57 95       	ror	r21
 e70:	47 95       	ror	r20
 e72:	37 95       	ror	r19
 e74:	27 95       	ror	r18
 e76:	ba 95       	dec	r27
 e78:	c9 f7       	brne	.-14     	; 0xe6c <__ultoa_invert+0xa2>
 e7a:	62 0f       	add	r22, r18
 e7c:	73 1f       	adc	r23, r19
 e7e:	84 1f       	adc	r24, r20
 e80:	95 1f       	adc	r25, r21
 e82:	a0 1d       	adc	r26, r0
 e84:	08 95       	ret

00000e86 <__prologue_saves__>:
 e86:	2f 92       	push	r2
 e88:	3f 92       	push	r3
 e8a:	4f 92       	push	r4
 e8c:	5f 92       	push	r5
 e8e:	6f 92       	push	r6
 e90:	7f 92       	push	r7
 e92:	8f 92       	push	r8
 e94:	9f 92       	push	r9
 e96:	af 92       	push	r10
 e98:	bf 92       	push	r11
 e9a:	cf 92       	push	r12
 e9c:	df 92       	push	r13
 e9e:	ef 92       	push	r14
 ea0:	ff 92       	push	r15
 ea2:	0f 93       	push	r16
 ea4:	1f 93       	push	r17
 ea6:	cf 93       	push	r28
 ea8:	df 93       	push	r29
 eaa:	cd b7       	in	r28, 0x3d	; 61
 eac:	de b7       	in	r29, 0x3e	; 62
 eae:	ca 1b       	sub	r28, r26
 eb0:	db 0b       	sbc	r29, r27
 eb2:	0f b6       	in	r0, 0x3f	; 63
 eb4:	f8 94       	cli
 eb6:	de bf       	out	0x3e, r29	; 62
 eb8:	0f be       	out	0x3f, r0	; 63
 eba:	cd bf       	out	0x3d, r28	; 61
 ebc:	09 94       	ijmp

00000ebe <__epilogue_restores__>:
 ebe:	2a 88       	ldd	r2, Y+18	; 0x12
 ec0:	39 88       	ldd	r3, Y+17	; 0x11
 ec2:	48 88       	ldd	r4, Y+16	; 0x10
 ec4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec8:	7d 84       	ldd	r7, Y+13	; 0x0d
 eca:	8c 84       	ldd	r8, Y+12	; 0x0c
 ecc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ece:	aa 84       	ldd	r10, Y+10	; 0x0a
 ed0:	b9 84       	ldd	r11, Y+9	; 0x09
 ed2:	c8 84       	ldd	r12, Y+8	; 0x08
 ed4:	df 80       	ldd	r13, Y+7	; 0x07
 ed6:	ee 80       	ldd	r14, Y+6	; 0x06
 ed8:	fd 80       	ldd	r15, Y+5	; 0x05
 eda:	0c 81       	ldd	r16, Y+4	; 0x04
 edc:	1b 81       	ldd	r17, Y+3	; 0x03
 ede:	aa 81       	ldd	r26, Y+2	; 0x02
 ee0:	b9 81       	ldd	r27, Y+1	; 0x01
 ee2:	ce 0f       	add	r28, r30
 ee4:	d1 1d       	adc	r29, r1
 ee6:	0f b6       	in	r0, 0x3f	; 63
 ee8:	f8 94       	cli
 eea:	de bf       	out	0x3e, r29	; 62
 eec:	0f be       	out	0x3f, r0	; 63
 eee:	cd bf       	out	0x3d, r28	; 61
 ef0:	ed 01       	movw	r28, r26
 ef2:	08 95       	ret

00000ef4 <_exit>:
 ef4:	f8 94       	cli

00000ef6 <__stop_program>:
 ef6:	ff cf       	rjmp	.-2      	; 0xef6 <__stop_program>
